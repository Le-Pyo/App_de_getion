#!/usr/bin/env python3
"""
Version simplifi√©e du module stock pour identifier le probl√®me
"""

import streamlit as st
import sqlite3
import pandas as pd
from datetime import date

def get_connection():
    """Connexion √† la base de donn√©es"""
    try:
        return sqlite3.connect(st.session_state["db_path"], check_same_thread=False)
    except Exception as e:
        st.error(f"Erreur de connexion DB: {e}")
        return None

def gestion_stocks_simple():
    """Version simplifi√©e de la gestion des stocks"""
    st.header("üì¶ Gestion des Stocks (Version Simple)")
    
    try:
        # Test de connexion DB
        conn = get_connection()
        if not conn:
            st.error("‚ùå Impossible de se connecter √† la base de donn√©es")
            return
        
        st.success("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        # Test de lecture des donn√©es
        try:
            df = pd.read_sql_query("SELECT * FROM stocks LIMIT 5", conn)
            st.success(f"‚úÖ Lecture des stocks r√©ussie ({len(df)} lignes)")
            
            if not df.empty:
                st.dataframe(df)
            else:
                st.info("‚ÑπÔ∏è Aucun stock trouv√©")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur lecture stocks: {e}")
        
        # Interface simple
        st.subheader("‚ûï Ajouter un stock")
        
        with st.form("add_stock_simple"):
            quantite = st.number_input("Quantit√©", min_value=0.0, step=0.1)
            commentaire = st.text_input("Commentaire")
            submitted = st.form_submit_button("Ajouter")
            
            if submitted and quantite > 0:
                try:
                    c = conn.cursor()
                    c.execute("""
                        INSERT INTO stocks (quantite, date_mouvement, commentaire)
                        VALUES (?, ?, ?)
                    """, (quantite, date.today(), commentaire))
                    conn.commit()
                    st.success("‚úÖ Stock ajout√© avec succ√®s!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur ajout: {e}")
        
        conn.close()
        
    except Exception as e:
        st.error(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        st.code(traceback.format_exc())

def gestion_ventes_simple():
    """Version simplifi√©e de la gestion des ventes"""
    st.header("üõí Gestion des Ventes (Version Simple)")
    
    try:
        # Test de connexion DB
        conn = get_connection()
        if not conn:
            st.error("‚ùå Impossible de se connecter √† la base de donn√©es")
            return
        
        st.success("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        # Test de lecture des donn√©es
        try:
            df = pd.read_sql_query("SELECT * FROM ventes LIMIT 5", conn)
            st.success(f"‚úÖ Lecture des ventes r√©ussie ({len(df)} lignes)")
            
            if not df.empty:
                st.dataframe(df)
            else:
                st.info("‚ÑπÔ∏è Aucune vente trouv√©e")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur lecture ventes: {e}")
        
        # Interface simple
        st.subheader("‚ûï Ajouter une vente")
        
        with st.form("add_vente_simple"):
            quantite = st.number_input("Quantit√©", min_value=0.0, step=0.1)
            prix = st.number_input("Prix unitaire", min_value=0.0, step=1.0)
            client = st.text_input("Client")
            submitted = st.form_submit_button("Ajouter")
            
            if submitted and quantite > 0 and prix > 0:
                try:
                    c = conn.cursor()
                    c.execute("""
                        INSERT INTO ventes (quantite, prix_unitaire, date_vente, acheteur)
                        VALUES (?, ?, ?, ?)
                    """, (quantite, prix, date.today(), client))
                    conn.commit()
                    st.success("‚úÖ Vente ajout√©e avec succ√®s!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur ajout: {e}")
        
        conn.close()
        
    except Exception as e:
        st.error(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        st.code(traceback.format_exc())